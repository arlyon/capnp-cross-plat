package main

import (
	"fmt"

	capnp "capnproto.org/go/capnp/v3"
)

// Code generated by capnpc-go. DO NOT EDIT.

func main() {
	arena := capnp.SingleSegment(nil)

	// Make a brand new empty message.  A Message allocates Cap'n Proto structs within
	// its arena.  For convenience, NewMessage also returns the root "segment" of the
	// message, which is needed to instantiate the Book struct.  You don't need to
	// understand segments and roots yet (or maybe ever), but if you're curious, messages
	// and segments are documented here:  https://capnproto.org/encoding.html
	_, seg, err := capnp.NewMessage(arena)
	if err != nil {
		panic(err)
	}

	// Create a new Book struct.  Every message must have a root struct.  Again, it is
	// not important to understand "root structs" at this point.  For now, just understand
	// that every type you instantiate needs to be a "root", unless you plan on assigning
	// it to another object.  When in doubt, use NewRootXXX.
	//
	// If you're insatiably curious, see:  https://capnproto.org/encoding.html#messages
	task, err := NewRootTaskHashable(seg)
	if err != nil {
		panic(err)
	}

	// Great, we have our book!  Now let's set some fields.  Each field you declared in
	// your schema will produce two methods on the generated type.  The "getter" method
	// has the name of the field, for example:  Book.Title().  The corresponding "setter"
	// method is prefixed with "Set", for example:  Book.SetTitle().
	//
	// Some getters and setters return errors, which we are ignoring in this example for
	// the sake of clarity.  Your code SHOULD check these errors and handle them.
	//
	// To begin, we set the book's title to "War and Peace".
	task.SetGlobalHash("global_hash")
	task.SetPackageDir("package_dir")
	task.SetHashOfFiles("hash_of_files")
	task.SetExternalDepsHash("external_deps_hash")
	task.SetTask("task")
	task.SetEnvMode("env_mode")

	{
	arena := capnp.SingleSegment(nil)
		_, seg, _ := capnp.NewMessage(arena)
		deps, _ := NewTaskOutputs(seg)
		
			list, _ := capnp.NewTextList(seg, 1)
	list.Set(0, "inclusions")
	deps.SetInclusions(list)

		list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "exclusions")
	deps.SetExclusions(list)

		task.SetOutputs(deps)

	}

	list, _ := capnp.NewTextList(seg, 1)
	list.Set(0, "task_dependency_hash")
	task.SetTaskDependencyHashes(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "pass_thru_args")
	task.SetPassThruArgs(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "env")
	task.SetEnv(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "pass_thru_env")
	task.SetPassThruEnv(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "dotenv")
	task.SetDotEnv(list)

	list, _ = capnp.NewTextList(seg, 0)
	task.SetResolvedEnvVars(list)

	bytes, _ := task.Message().Marshal()

	digest := New()
	digest.Write(bytes)
	out := digest.Sum64()


	fmt.Printf("%x", out)
}
